{"./":{"url":"./","title":"🐇 Home","keywords":"","body":"Hugh GitBook [!NOTE] 반갑습니다. Hugh GitBook에 오신것을 환영합니다 :) gitbook-cli 로 Deploy 되었어요. console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"posts/memos/":{"url":"posts/memos/","title":"🐣 Memos","keywords":"","body":"Memos 그냥 메모하는 공간 01. Zsh 02. Rancher 03. Gitbook 04. Docker 05. Algorithm console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"posts/memos/01-zsh.html":{"url":"posts/memos/01-zsh.html","title":"01. Zsh","keywords":"","body":"zsh 요즘 정말 많이 사용하고 있는 zsh 현재 사용하고 있는 Setting을 정리해 본다. 1. zsh 설치 1.1 Ubuntu sudo apt install zsh git 1.2 CentOS / Oracle Linux # yum을 이용한 방법 sudo yum install zsh git # dnf를 이용한 방법 sudo dnf install zsh git 2. oh my zsh 설치 참고: GitHub ohmyzsh/ohmyzsh sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" 2.1 사용자 기본 Shell 변경 chsh -s $(which zsh) $USER 3. zsh plugins 설치 참고: GitHub zsh-users # zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting # zsh-autosuggestions git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions # zsh-completions git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions 3.1 설치한 plugins 사용하기 vi ~/.zshrc # 아래 부분을 찾아서 변경 plugins=(git zsh-autosuggestions zsh-syntax-highlighting zsh-completions) # sed를 이용한 변경 sed -i 's/(git)/(git zsh-autosuggestions zsh-syntax-highlighting zsh-completions)/' ~/.zshrc source ~/.zshrc 4. oh my zsh Theme 변경 vi ~/.zshrc # 아래 부분을 찾아서 변경 ZSH_THEME=\"agnoster\" # sed를 이용한 변경 sed -i 's/robbyrussell/agnoster/' ~/.zshrc source ~/.zshrc 4.1 prompt_context 변경 echo 'prompt_context() {}' >> ~/.zshrc 을 하거나, vi .oh-my-zsh/themes/agnoster.zsh-theme # Context: user@hostname (who am I and where am I) prompt_context() { if [[ \"$USERNAME\" != \"$DEFAULT_USER\" || -n \"$SSH_CLIENT\" ]]; then prompt_segment black default \"%(!.%{ %F{yellow}% }.)%n@%m\" fi } 에서 원하는 형식으로 변경 (user만 나오게) ex) prompt_segment black default \"%(!.%{ %F{yellow}% }.)%n\" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"posts/memos/02-rancher.html":{"url":"posts/memos/02-rancher.html","title":"02. Rancher","keywords":"","body":"Rancher 회사에서 정말 많이 그리고 유용하게 사용하고 있는 Rancher 나는 Rancher가 있어서 정말 좋다. &#x1F44D; 1. Docker 설치 Docker는 설치하는 방법은 정말 다양하다. 1.1 Rancher에서 제공하는 Shell Script 참고: GitHub rancher/install-docker # Docker 20.10 (추천) curl https://releases.rancher.com/install-docker/20.10.sh | sh # Docker 19.03 curl https://releases.rancher.com/install-docker/19.03.sh | sh 1.2 Docker에서 제공하는 방법 참고: Install Docker Engine on CentOS 참고: Install Docker Engine on Ubuntu 위에 링크를 참고하면 됨. 1.3 Docker에서 제공하는 Shell Script 참고: Install Docker Engine on CentOS 아쉽게도 2021-07-31 현재 Oracle Linux 8.4 arm64에서는 동작하지 않는거 같음. curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh 2. Rancher 설치 참고: Installing Rancher on a Single Node Using Docker 참고: Advanced Options for Docker Installs # 포트는 변경 가능 (-p 8080:80 -p 8443:443) docker run -d --restart=unless-stopped \\ -p 80:80 -p 443:443 \\ -v /opt/rancher:/var/lib/rancher \\ --privileged \\ rancher/rancher:latest console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"posts/memos/03-gitbook.html":{"url":"posts/memos/03-gitbook.html","title":"03. Gitbook","keywords":"","body":"Gitbook 1. gitbook-cli를 이용하여 gitbook install 시 발생하는 에러 처리 방법 에러 로그 Installing GitBook 3.2.3 /usr/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287 if (cb) cb.apply(this, arguments) ^ TypeError: cb.apply is not a function at /usr/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287:18 at FSReqCallback.oncomplete (node:fs:196:5) gitbook install 시 dependency가 있는 graceful-fs 의 버전이 4.1.11으로 호환성 문제가 존재하여 4.1.4로 downgrade를 해줘야 한다. 참고: Gitbook build stopped to work in node 12.18.3 1.1 gitbook-cli를 global로 설치할 경우 설치 된 경로로 이동 # Linux cd /usr/lib/node_modules/gitbook-cli/node_modules/npm # Windows cd C:\\Users\\\\AppData\\Roaming\\npm\\node_modules\\gitbook-cli\\node_modules\\npm 1.2 graceful-fs 4.1.4 버전으로 재설치 npm install graceful-fs@4.1.4 1.3 gitbook Project 폴더에서 gitbook install 실행 gitbook install 2. Gitbook의 build 산출물을 gh-pages branch로 push 하는 Shell Script gitbook-cli가 설치되어 있어야 하며, gh-pages branch가 생성되어 있어야 한다. #!/bin/bash # 1. Remove directories git worktree remove dist rm -rf _book rm -rf dist # 2. Build gitbook gitbook install && gitbook build # 3. Copy gh-pages branch to dist directory git worktree add dist origin/gh-pages -fB gh-pages # 4.Remove all files except .git and .gitignore find ./dist ! -name \".git*\" -delete # 5. Copy gitbook output to dist (gh-pages branch) cp -R _book/* dist/ # 6. Checkout gh-pages branch cd dist # 7. Commit and push to origin/gh-pages git add . git commit -m \"Upload gh-pages\" git push origin gh-pages console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"posts/memos/04-docker.html":{"url":"posts/memos/04-docker.html","title":"04. Docker","keywords":"","body":"Docker 요즘 Systemd 대신 Docker를 많이 사용하는데, 자주 사용하는 commands를 정리해본다. Docker Hub에 등록할 Tag 버전명을 환경변수로 등록해서 사용 echo \"export file_manager_version=2.0.1\" >> ~/.zshrc # 적용 source ~/.zshrc # 확인 echo ${file_manager_version} 1. Dockerfile 참고: Spring Boot with Docker Springboot 기준 Dockerfile 테스트 버전 참고 FROM azul/zulu-openjdk:11 ENV TZ=Asia/Seoul ARG JAR_FILE=build/libs/*.jar # Set Timezone RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo ${TZ} > /etc/timezone # Container Volume VOLUME [\"/opt/hugh\"] # Port EXPOSE 8080 # Copy jar file to the container COPY ${JAR_FILE} app.jar # Run Application ENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"] 2. Docker Build Docker build를 하기 전에 Springboot의 Gradle build가 선행되어야 한다. build/libs 폴더 하위에 jar 파일 존재 여부 확인 # Dockerfile 이 위치한 폴더에서 실행해야 하며 뒤에 . 이 필요 (현재 경로를 의미) sudo docker build -t royalahn/file-manager:${file_manager_version} . 3. Docker Run user_host, user_username, user_password는 환경변수이며 사전에 등록이 필요 sudo docker run -d -p 8080:8080 -v /opt/hugh:/opt/hugh --name file-manager \\ -e user.host=${user_host} \\ -e user.username=${user_username} \\ -e user.password=${user_password} \\ royalahn/file-manager:${file_manager_version} 4. Docker Logs Docker run 시 -d 옵션을 주어 detach(Background)로 실행했을 때 로그를 보는 방법 sudo docker logs file-manager 5. Docker Exec Docker 가 실행된 가상 VM에 접속하기 위한 방법 sudo docker exec -it file-manager /bin/bash 6. Docker Stop Docker로 실행중인 서비스를 잠시 멈추는 방법 sudo docker stop file-manager # 전체를 멈추는 방법 sudo docker stop $(docker ps -a -q) 7. Docker Remove 멈춤상태의 서비스를 제거하는 방법 sudo docker rm file-manager # 전체를 제거하는 방법 sudo docker rm $(docker ps -a -q) 8. Docker Remove Images Docker 이미지 제거 sudo docker rmi royalahn/file-manager:${file_manager_version} 9. Docker Hub에 로그인 echo \"export docker_username=royalahn\" >> ~/.zshrc # 을 실제 비번으로 변경 echo \"export docker_password=\" >> ~/.zshrc echo ${docker_password} | sudo docker login -u ${docker_username} --password-stdin 10. Docker Tag 2.0.1 의 Tag를 latest나 master 등으로 변경 sudo docker tag royalahn/file-manager:${file_manager_version} royalahn/file-manager:master sudo docker tag royalahn/file-manager:${file_manager_version} royalahn/file-manager:latest 11. Docker Push sudo docker push royalahn/file-manager:${file_manager_version} 12. Docker Pull sudo docker pull royalahn/file-manager:${file_manager_version} sudo docker pull docker.io/royalahn/file-manager:${file_manager_version} 13. Docker Service의 로그 Systemd에 의해 수행되는 Docker의 로그 echo 'alias docker-log=\"sudo journalctl -xeu docker\"' >> ~/.zshrc # 수행 docker-log console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"posts/memos/05-algorithm.html":{"url":"posts/memos/05-algorithm.html","title":"05. Algorithm","keywords":"","body":"Algorithm 알고리즘 학습 페이지 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}